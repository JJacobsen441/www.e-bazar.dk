@model www.e_bazar.dk.Models.DTOs.col_booth
@{
    ViewBag.Title = "Bod";
}
@{

    try
    {
        <div class="remove_desk_block ">
            <div class="l-bt-filler"></div>
            <div class="z-padding-sides-0">

            </div>
            <div class="col-xs-12 xz-only-desk z-padding-sides-0">
                <div class="col-xs-4 z-padding-left-0">
                    <div class="xz-only-desk">
                        <div id="map" class="l-bt-map1">

                        </div>
                    </div>


                    <script src="https://unpkg.com/es6-promise%404.2.4/dist/es6-promise.auto.min.js"></script>
                    <script src="https://unpkg.com/%40mapbox/mapbox-sdk/umd/mapbox-sdk.min.js"></script>
                    <script>
                    var address = '@ViewBag.Address';
                    address = myDecode(address);//.replace(' ', '%20');

                    var full = '@ViewBag.Full' == 'true' ? 14 : 10.5;
                    // TO MAKE THE MAP APPEAR YOU MUST
                    // ADD YOUR ACCESS TOKEN FROM
                    // https://account.mapbox.com
                    mapboxgl.accessToken = 'pk.eyJ1Ijoiam9ha2ltMjUwMyIsImEiOiJjazJlaWZhNm8wMjVnM25wYWxoMXkzcHY1In0.7jWt2TCe2FG02QzSqLkauw';
                    var mapboxClient = mapboxSdk({ accessToken: mapboxgl.accessToken });
                    mapboxClient.geocoding
                        .forwardGeocode({
                            query: address,
                            autocomplete: false,
                            limit: 1
                        })
                        .send()
                        .then(function (response) {
                            if (
                                response &&
                                response.body &&
                                response.body.features &&
                                response.body.features.length
                            ) {
                                var feature = response.body.features[0];

                                var map = new mapboxgl.Map({
                                    container: 'map',
                                    style: 'mapbox://styles/mapbox/streets-v11',
                                    center: feature.center,
                                    zoom: full
                                });

                                // Create a marker and add it to the map.
                                //new mapboxgl.Marker({color: 'red'}).setLngLat(feature.center).addTo(map);
                                new mapboxgl.Marker().setLngLat(feature.center).addTo(map);
                            }
                        });
                    function replaceAll(str, find, replace) {
                        return str.replace(new RegExp(find, 'g'), replace);
                    }
                    function myDecode(str) {
                        str = replaceAll(str, '&#230;', 'æ');
                        str = replaceAll(str, '&#248;', 'ø');
                        str = replaceAll(str, '&#229;', 'å');
                        str = replaceAll(str, '&#198;', 'Æ');
                        str = replaceAll(str, '&#216;', 'Ø');
                        str = replaceAll(str, '&#197;', 'Å');
                        return str;
                    }
                    </script>
                    <br />
                    <fieldset class="col-xs-12 xl-bt-description1 z-padding-bottom-15 z-background-color-darkgrey z-border-bottom-left-radius-10 z-padding-all-15 z-border-top-left-radius-10">
                        <legend class="z-bold z-font-text z-background-color-lightgrey z-padding-all-15 z-width-auto">Beskrivelse</legend>
                        <br />
                        <br />
                        @{
                            string ddesc = !string.IsNullOrEmpty(Model.booth_dto.description) ? Model.booth_dto.description : TextHelper.GetNopValue(NOP.NO_DESCRIPTION.ToString());
                        }
                        @Html.DisplayWithBreaksFor(ddesc)
                        <br />&nbsp;
                    </fieldset>
                    <br />
                    @if (@Model.is_advanced)
                    {
                        @Html.Partial("~/Views/Partials/_Booth_Navigation.cshtml", @Model.folders)
                        <br />
                    }
                    <fieldset class="z-background-color-darkgrey z-padding-all-15 z-border-bottom-left-radius-10 z-border-top-left-radius-10">
                        <legend class="z-bold z-font-text z-background-color-lightgrey z-padding-all-15 z-width-auto">Lignende Søgninger</legend><br />
                        <ul class="z-list-style-none">
                            @foreach (dto_booth poco in Model.chance)
                            {
                                <li>
                                    @Html.Partial("~/Views/Partials/_Booth_Chance.cshtml", poco)
                                </li>
                            }
                        </ul>

                    </fieldset>
                </div>
                <div class="col-xs-8">
                    @{
                        dto_person dcurrent_user = ViewBag.CurrentUser as dto_person;
                        string dperson_id = dcurrent_user != null ? dcurrent_user.person_id : "";
                    }
                    @Html.HiddenFor(m => dperson_id, new { @class = "bo_hidden_personid" })
                    @Html.HiddenFor(model => model.booth_dto.booth_id, new { @class = "bo_hidden_boothid" })
                    @Html.HiddenFor(model => model.s)
                    @Html.HiddenFor(model => model.c)
                    @Html.HiddenFor(m => Model.folders.selected, new { @class = "hidden_catelog" })
                    <div class="col-xs-12 l-bt-header1 xz-only-desk z-border-darkgrey z-border-lightgrey z-padding-sides-0">
                            @{
                                object droute = new { };
                                var dimage_pathA = !string.IsNullOrEmpty(Model.booth_dto.frontimage) ? "/_content/images/profiles/" + Model.booth_dto.salesman_dto.sysname + "/booths/" + Model.booth_dto.sysname + "/" + Model.booth_dto.frontimage : "/_content/images/site/icons/booth_logo.png";

                                string dalt = "/_content/images/site/icons/booth_logo.png";
                                string[] dclasses = { "l-bt-header2" };
                                string[] dclass_a = new string[] { "l-bt-header3" };
                                string dstyle = "";
                                string dstyle_a = "";
                                @Html.RouteImage("Booth", droute, dimage_pathA, null, dalt, dclasses, dclass_a, dstyle, dstyle_a)
                            }
                            <div class="l-bt-header7 z-float-left">
                                @if (!string.IsNullOrEmpty(Model.booth_dto.name))
                                {
                                    string dstreet_address = Model.booth_dto.fulladdress ? Model.booth_dto.street_address + "<br />" : "";
                                    string darea = Model.booth_dto.region_dto.zip + " " + Model.booth_dto.region_dto.town + "<br />";
                                    string dcountry = Model.booth_dto.country;

                                    <table class="">
                                        <tr>
                                            <td class="l-bt-textA z-padding-all-15 z-padding-bottom-0 ">@Model.booth_dto.name</td>

                                        </tr>
                                        <tr>

                                            <td class="z-color-green z-padding-left-15">@Html.Raw(dstreet_address + darea + dcountry)</td>

                                        </tr>
                                    </table>
                                }
                            </div>
                            <div class="l-bt-header5">
                                @if (dcurrent_user != null)
                                {
                                    string dname = Model.booth_dto.salesman_dto.firstname != "" ? Model.booth_dto.salesman_dto.firstname + " " + Model.booth_dto.salesman_dto.lastname : "";
                                    <div class="z-padding-right-15 xz-only-desk z-padding-top-15 z-align-right">
                                        <i class="far fa-star" id="1"></i>
                                        <i class="far fa-star" id="2"></i>
                                        <i class="far fa-star" id="3"></i>
                                        <i class="far fa-star" id="4"></i>
                                        <i class="far fa-star" id="5"></i><br />
                                        @if (dname != "")
                                        {
                                            <a href="#">[@dname]</a><br />

                                        }

                                        @if (dcurrent_user.following.Where(f => f.booth_id == Model.booth_dto.booth_id).Count() > 0)
                                        {
                                            @Html.RouteLink("Følg ikke", "RemoveFollowing1", new { booth_id = Model.booth_dto.booth_id }, new { @class = "myfade" })
                                        }
                                        else
                                        {
                                            @Html.RouteLink("Følg", "AddFollowing", new { booth_id = Model.booth_dto.booth_id }, new { @class = "myfade" })
                                        }
                                    </div>
                                }

                                @if (dcurrent_user == null || !Model.is_owner)
                                {
                                    <span class="l-bt-header6 z-padding-right-15 z-padding-top-15">
                                        @using (Html.BeginRouteForm("MessageA", new { type = "booth", id = Model.booth_dto.booth_id }, FormMethod.Get, null))
                                        {
                                            <input type="submit" value="Skriv til sælger" class="btn z-background-color-black-1 z-color-white-1 z-hover-white2 myfade" />
                                        }
                                    </span>
                                }
                            
                        </div>
                    </div>
                    <div class="col-xs-12 z-padding-sides-0">
                        <span class="z-padding-left-15 z-bold">
                            Udpluk af sælgers stande
                        </span>
                    </div>
                    <div class="col-xs-12 l-bt-other1 z-padding-sides-0">
                        @for (int counter = 0; counter < Model.other_booths.Count(); counter++)
                        {
                            if (counter != 0 && counter % 3 == 0)
                            {
                                @Html.Raw("</div>");
                                @Html.Raw("<div class=\"col-xs-12 z-padding-sides-0 z-border-darkgrey\">");
                            }
                            dto_booth item = Model.other_booths.ElementAt(counter);
                            @Html.Partial("~/Views/Partials/_Booth_Other.cshtml", item)
                        }
                    </div>


                    <div class="row z-padding-left-15">
                            @{ 
                                biz_booth biz = new biz_booth();
                                Html.Raw("<span class=\"z-bold\">");
                                Html.Raw("Der blev fundet <span class=\"red\">" + biz.GetRelevantItems(Model.booth_dto, -1, -1).Count + "</span>");
                                if (biz.GetRelevantItems(Model.booth_dto, -1, -1).Count == 1)
                                {
                                    Html.Raw("<span>vare</span>");
                                }
                                else
                                {
                                    Html.Raw("<span>varer</span>");
                                }
                                    Html.Raw("</span>");
                                            }
                    </div>
                    <div class="row l-bt-showcase1">
                        <br />
                        @{
                            biz_booth biz2 = new biz_booth();
                            int dblock_counter = 0;
                            List<dto_booth_item> dlist = biz2.GetRelevantItems(Model.booth_dto, - 1, -1);

                            int drest = dlist.Count() % 2 != 0 ? 2 - (dlist.Count() % 2) : 0;
                            int daprox = dlist.Count() + drest;
                            for (int dcounter = 0; dcounter < daprox; dcounter++)
                            {
                                dto_booth_item item = dcounter < dlist.Count() ? dlist.ElementAt(dcounter) : null;
                                if (dblock_counter % 2 == 0 && dblock_counter != 0)
                                {
                                            @Html.Raw("</div>")
                                            @Html.Raw("<br /><br />")
                                            @Html.Raw("<div class=\"row l-bt-showcase1\">")
                                        }

                                    @Html.Partial("~/Views/Partials/_Booth_Item.cshtml", new ViewDataDictionary(item))
                                        dblock_counter++;
                                    }
                                }
                    </div>
                </div>
                &nbsp;<br />
                &nbsp;<br />
            </div>
        </div>



































        <div class=" remove_tab_block">
            <div class="l-bt-filler"></div>
            <div class="z-padding-sides-0">

            </div>
            <div class="col-xs-12 xz-only-desk xz-padding-sides-0">
                <div class="col-xs-4 z-padding-left-0">
                    <div class="xz-only-desk">
                        <div id="map" class="l-bt-map1">

                        </div>
                    </div>


                    <script src="https://unpkg.com/es6-promise%404.2.4/dist/es6-promise.auto.min.js"></script>
                    <script src="https://unpkg.com/%40mapbox/mapbox-sdk/umd/mapbox-sdk.min.js"></script>
                    <script>
                    var address = '@ViewBag.Address';
                                address = myDecode(address);//.replace(' ', '%20');

                                var full = '@ViewBag.Full' == 'true' ? 14 : 10.5;
                                // TO MAKE THE MAP APPEAR YOU MUST
                                // ADD YOUR ACCESS TOKEN FROM
                                // https://account.mapbox.com
                                mapboxgl.accessToken = 'pk.eyJ1Ijoiam9ha2ltMjUwMyIsImEiOiJjazJlaWZhNm8wMjVnM25wYWxoMXkzcHY1In0.7jWt2TCe2FG02QzSqLkauw';
                                var mapboxClient = mapboxSdk({ accessToken: mapboxgl.accessToken });
                                mapboxClient.geocoding
                                    .forwardGeocode({
                                query: address,
                            autocomplete: false,
                            limit: 1
                                    })
                        .send()
                        .then(function (response) {
                                    if (
                                        response &&
                                        response.body &&
                                        response.body.features &&
                                        response.body.features.length
                                    ) {
                                        var feature = response.body.features[0];

                                        var map = new mapboxgl.Map({
                                    container: 'map',
                                    style: 'mapbox://styles/mapbox/streets-v11',
                                    center: feature.center,
                                    zoom: full
                                        });

                                    // Create a marker and add it to the map.
                                    //new mapboxgl.Marker({color: 'red'}).setLngLat(feature.center).addTo(map);
                                    new mapboxgl.Marker().setLngLat(feature.center).addTo(map);
                                }
                        });
                                function replaceAll(str, find, replace) {
                                    return str.replace(new RegExp(find, 'g'), replace);
                                }
                                function myDecode(str) {
                                    str = replaceAll(str, '&#230;', 'æ');
                                    str = replaceAll(str, '&#248;', 'ø');
                                    str = replaceAll(str, '&#229;', 'å');
                                    str = replaceAll(str, '&#198;', 'Æ');
                                    str = replaceAll(str, '&#216;', 'Ø');
                                    str = replaceAll(str, '&#197;', 'Å');
                                    return str;
                                }
                    </script>
                    <br />
                    <fieldset class="col-xs-12 xl-bt-description1 z-padding-bottom-15 z-background-color-darkgrey z-border-bottom-left-radius-10 z-padding-all-15 z-border-top-left-radius-10">
                        <legend class="z-bold z-font-text z-background-color-lightgrey z-padding-all-15 z-width-auto">Beskrivelse</legend>
                        <br />
                        <br />
                        @{
                                    string tdesc = !string.IsNullOrEmpty(Model.booth_dto.description) ? Model.booth_dto.description : TextHelper.GetNopValue(NOP.NO_DESCRIPTION.ToString());
                                }
                                @Html.DisplayWithBreaksFor(tdesc)
                                <br />&nbsp;
                    </fieldset>
                    <br />
                    @if (@Model.is_advanced)
                    {
                                    @Html.Partial("~/Views/Partials/_Booth_Navigation.cshtml", @Model.folders)
                                    <br />
                    }
                    <fieldset class="z-background-color-darkgrey z-padding-all-15 z-border-bottom-left-radius-10 z-border-top-left-radius-10">
                        <legend class="z-bold z-font-text z-background-color-lightgrey z-padding-all-15 z-width-auto">Lignende Søgninger</legend><br />
                        <ul class="z-list-style-none">
                            @foreach (dto_booth poco in Model.chance)
                            {
                                <li>
                                    @Html.Partial("~/Views/Partials/_Booth_Chance.cshtml", poco)
                                </li>
                            }
                        </ul>

                    </fieldset>
                </div>
                <div class="col-xs-8">
                    @{
                                    dto_person tcurrent_user = ViewBag.CurrentUser as dto_person;
                                    string tperson_id = tcurrent_user != null ? tcurrent_user.person_id : "";
                                }
                                @Html.HiddenFor(m => tperson_id, new { @class = "bo_hidden_personid" })
                    @Html.HiddenFor(model => model.booth_dto.booth_id, new { @class = "bo_hidden_boothid" })
                    @Html.HiddenFor(model => model.s)
                    @Html.HiddenFor(model => model.c)
                    @Html.HiddenFor(m => Model.folders.selected, new { @class = "hidden_catelog" })
                    <div class="col-xs-12 z-padding-sides-0">
                        <div class="l-bt-header1 xz-only-desk z-border-darkgrey z-border-lightgrey">
                            @{
                                    object troute = new { };
                                    var timage_pathA = !string.IsNullOrEmpty(Model.booth_dto.frontimage) ? "/_content/images/profiles/" + Model.booth_dto.salesman_dto.sysname + "/booths/" + Model.booth_dto.sysname + "/" + Model.booth_dto.frontimage : "/_content/images/site/icons/booth_logo.png";

                                    string talt = "/_content/images/site/icons/booth_logo.png";
                                    string[] tclasses = { "l-bt-header2" };
                                    string[] tclass_a = new string[] { "l-bt-header3" };
                                    string tstyle = "";
                                    string tstyle_a = "";
                                    @Html.RouteImage("Booth", troute, timage_pathA, null, talt, tclasses, tclass_a, tstyle, tstyle_a)
                            }
                            <div class="z-width-30-percent z-float-left">
                                @if (!string.IsNullOrEmpty(Model.booth_dto.name))
                                {
                                    string tstreet_address = Model.booth_dto.fulladdress ? Model.booth_dto.street_address + "<br />" : "";
                                    string tarea = Model.booth_dto.region_dto.zip + " " + Model.booth_dto.region_dto.town + "<br />";
                                    string tcountry = Model.booth_dto.country;

                                    <table class="">
                                        <tr>
                                            <td class="l-bt-textA z-padding-all-15 z-padding-bottom-0 ">@Model.booth_dto.name</td>

                                        </tr>
                                        <tr>

                                            <td class="z-color-green z-padding-left-15">@Html.Raw(tstreet_address + tarea + tcountry)</td>

                                        </tr>
                                    </table>
                                }
                            </div>
                            <div class="l-bt-header5">
                                @if (tcurrent_user != null)
                                {
                                    string tname = Model.booth_dto.salesman_dto.firstname != "" ? Model.booth_dto.salesman_dto.firstname + " " + Model.booth_dto.salesman_dto.lastname : "";
                                    <div class="z-padding-right-15 xz-only-desk z-padding-top-15 z-align-right">
                                        <i class="far fa-star" id="1"></i>
                                        <i class="far fa-star" id="2"></i>
                                        <i class="far fa-star" id="3"></i>
                                        <i class="far fa-star" id="4"></i>
                                        <i class="far fa-star" id="5"></i><br />
                                        @if (tname != "")
                                        {
                                            <a href="#">[@tname]</a><br />

                                        }

                                @if (tcurrent_user.following.Where(f => f.booth_id == Model.booth_dto.booth_id).Count() > 0)
                                        {
                                    @Html.RouteLink("Følg ikke", "RemoveFollowing1", new { booth_id = Model.booth_dto.booth_id }, new { @class = "myfade" })
                                        }
                                        else
                                {
                                    @Html.RouteLink("Følg", "AddFollowing", new { booth_id = Model.booth_dto.booth_id }, new { @class = "myfade" })
                                        }
                                    </div>
                                }

                                @if (tcurrent_user == null || !Model.is_owner)
                                {
                                    <span class="z-padding-right-15 z-padding-top-15 z-float-right">
                                        @using (Html.BeginRouteForm("MessageA", new { type = "booth", id = Model.booth_dto.booth_id }, FormMethod.Get, null))
                                        {
                                            <input type="submit" value="Skriv til sælger" class="btn z-background-color-black-1 z-color-white-1 z-hover-white2 myfade" />
                                        }
                                    </span>
                                }
                            </div>
                        </div>
                    </div>
                    <br />
                    <div class="col-xs-12 z-padding-sides-0">
                        <span class="z-padding-left-15 z-bold">
                            Udpluk af sælgers boder
                        </span>
                    </div>
                    <div class="col-xs-12 l-bt-other1 z-padding-sides-0">
                        @for (int counter = 0; counter < Model.other_booths.Count(); counter++)
                        {
                                    if (counter != 0 && counter % 3 == 0)
                                    {
                                        @Html.Raw("</div>");
                                        @Html.Raw("<div class=\"col-xs-12 z-padding-sides-0 z-border-darkgrey\">");
                                    }
                                    dto_booth item = Model.other_booths.ElementAt(counter);
                                    @Html.Partial("~/Views/Partials/_Booth_Other.cshtml", item)
                        }
                    </div>


                    <div class="row z-padding-left-15">
                        @{ 
                            biz_booth biz3 = new biz_booth();
                            Html.Raw("<span class=\"z-bold\">");
                            Html.Raw("Der blev fundet <span class=\"red\">" +biz3.GetRelevantItems(Model.booth_dto, -1, -1).Count + "</span>");
                            if (biz3.GetRelevantItems(Model.booth_dto, - 1, -1).Count == 1)
                            {
                                Html.Raw("<span>vare</span>");
                            }
                            else
                            {
                                Html.Raw("<span>varer</span>");
                            }
                            Html.Raw("</span>");
                        }
                    </div>
                    <div class="row l-bt-showcase1">
                        <br />
                        @{
                            biz_booth biz4 = new biz_booth();
                            int tblock_counter = 0;
                            List<dto_booth_item> tlist = biz4.GetRelevantItems(Model.booth_dto, - 1, -1);

                            int trest = tlist.Count() % 2 != 0 ? 2 - (tlist.Count() % 2) : 0;
                            int taprox = tlist.Count() + trest;
                            for (int counter = 0; counter < taprox; counter++)
                            {
                                dto_booth_item item = counter < tlist.Count() ? tlist.ElementAt(counter) : null;
                                if (tblock_counter % 2 == 0 && tblock_counter != 0)
                                {
                                            @Html.Raw("</div>")
                                            @Html.Raw("<br /><br />")
                                            @Html.Raw("<div class=\"row l-bt-showcase1\">")
                                }

                                @Html.Partial("~/Views/Partials/_Booth_Item.cshtml", new ViewDataDictionary(item))
                                        tblock_counter++;
                                    }
                                }
                    </div>
                </div>
                &nbsp;<br />
                &nbsp;<br />
            </div>
        </div>



































        <div class="remove_phone_block ">
            @*<div class="z-background-color-black-1 z-padding-top-15"></div>*@

            <div class="container z-padding-top-15 xz-padding-sides-0">

                @{
                    dto_person mcurrent_user = ViewBag.CurrentUser as dto_person;
                    string mperson_id = mcurrent_user != null ? mcurrent_user.person_id : "";
                }
                @Html.HiddenFor(m => mperson_id, new { @class = "bo_hidden_personid" })
                @Html.HiddenFor(model => model.booth_dto.booth_id, new { @class = "bo_hidden_boothid" })
                @Html.HiddenFor(model => model.s)
                @Html.HiddenFor(model => model.c)
                @Html.HiddenFor(m => Model.folders.selected, new { @class = "hidden_catelog" })

                <div class="col-sm-12 z-padding-sides-0">
                    <div class="z-border-white z-background-color-lightgrey">
                        @{
                            object mroute = new { };
                            var mimage_pathA = !string.IsNullOrEmpty(Model.booth_dto.frontimage) ? "/_content/images/profiles/" + Model.booth_dto.salesman_dto.sysname + "/booths/" + Model.booth_dto.sysname + "/" + Model.booth_dto.frontimage : "/_content/images/site/icons/booth_logo.png";

                            string malt = "/_content/images/site/icons/booth_logo.png";
                            string[] mclasses = { "m-l-bt-header1" };
                            string[] mclass_a = new string[] { "" };
                            string mstyle = "";
                            string mstyle_a = "";
                            @Html.RouteImage("Booth", mroute, mimage_pathA, null, malt, mclasses, mclass_a, mstyle, mstyle_a)
                        }
                    </div>
                    @if (!string.IsNullOrEmpty(Model.booth_dto.name))
                    {

                        string mstreet_address = Model.booth_dto.fulladdress ? Model.booth_dto.street_address + "<br />" : "";
                        string marea = Model.booth_dto.region_dto.zip + " " + Model.booth_dto.region_dto.town + "<br />";
                        string mcountry = Model.booth_dto.country;

                        <div class="col-sm-12 xz-only-phone-block xz-only-tab-block  z-width-100-percent z-background-color-white">
                            <div class="">
                                <table class="z-padding-bottom-0 z-padding-right-0">
                                    <tr>
                                        <td class="l-bt-textA">@Model.booth_dto.name</td>
                                        <td class="z-padding-left-15"><a href="#" class="l-bt-textB xz-only-desk">[@Model.booth_dto.salesman_dto.firstname @Model.booth_dto.salesman_dto.lastname]</a></td>
                                    </tr>
                                    <tr>
                                        <td class="z-color-red">@Html.Raw(mstreet_address + marea + mcountry)</td>
                                        <td class="" valign="top"></td>
                                    </tr>
                                </table><br />
                            </div>
                        </div>
                    }
                </div>


                @if (mcurrent_user == null || !Model.is_owner)
                {
                    <div class="col-sm-12 z-background-color-black-1 z-padding-sides-0">
                        <span class="z-background-color-black-1">
                            @using (Html.BeginRouteForm("MessageA", new { type = "booth", id = Model.booth_dto.booth_id }, FormMethod.Get, null))
                            {
                                <input type="submit" value="Skriv til sælger" class="btn m-l-bt-write1 z-background-color-black-1 z-color-white-1 z-bold myfade" />
                            }
                        </span>
                    </div>
                }
                @{

                    <div class="row z-padding-left-15">
                        <br />
                        @{ 
                            biz_booth biz5 = new biz_booth();
                            Html.Raw("<span class=\"z-bold z-padding-left-15\">");
                            Html.Raw("Der blev fundet <span class=\"z-color-red\">" + biz5.GetRelevantItems(Model.booth_dto, -1, -1).Count + "</span>");

                            if (biz5.GetRelevantItems(Model.booth_dto, - 1, -1).Count == 1)
                            {
                                Html.Raw("<span>vare</span>");
                            }
                            else
                            {
                                Html.Raw("<span>varer</span>");
                            }
                            Html.Raw("</span>");
                        }
                    </div>
                    <div class="row m-l-bt-showcase1">
                        <br />
                        @{
                            biz_booth biz6 = new biz_booth();
                            int mblock_counter = 0;
                            List<dto_booth_item> mlist = biz6.GetRelevantItems(Model.booth_dto, - 1, -1);

                            int mrest = mlist.Count() % 4 != 0 ? 4 - (mlist.Count() % 4) : 0;
                            int maprox = mlist.Count() + mrest;
                            for (int counter = 0; counter < maprox; counter++)
                            {
                                dto_booth_item item = counter < mlist.Count() ? mlist.ElementAt(counter) : null;
                                if (mblock_counter % 4 == 0 && mblock_counter != 0)
                                {
                                    @Html.Raw("</div>")
                                    @Html.Raw("<div class=\"row m-l-bt-showcase1\">")
                                }

                                @Html.Partial("~/Views/Partials/_Booth_Item.cshtml", new ViewDataDictionary(item))
                                mblock_counter++;
                            }
                        }
                    </div>
                }
            </div>
        </div>
                            }
                            catch (Exception e)
                            {
                                string s = ErrorHelper.HandleError(ERROR.MARKETPLACE, e);
                                string subject = "Fejl i front, Booth(MOB)";
                                string body = s;
                                AdminHelper.Notification.Run("mail@e-bazar.dk", "mail@e-bazar.dk", "mail@e-bazar.dk", subject, body);
                            }


}
@{
                                string rating = "" + Model.rating;
                                string rating_url = @Url.RouteUrl("AddRating");
                                string marketplace_url = @Url.RouteUrl("Marketplace");
    <input type="hidden" id="rating" value="@rating" />
    <input type="hidden" id="rating_url" value="@rating_url" />
    <input type="hidden" id="marketplace_url" value="@marketplace_url" />
}
@*<script src="~/Content/js/front_booth.js" asp-append-version="true"></script>*@
<script>

</script>

